// <auto-generated />
namespace Smart.Resolver.Providers
{
    using System;

    public sealed partial class StandardProvider
    {
        private static Func<IKernel, object> CreateActivator1(
            Func<object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            return k =>
            {
                var instance = activator(f1(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator1(
            Func<object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            return k => activator(f1(k));
        }

        private static Func<IKernel, object> CreateActivator2(
            Func<object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            return k =>
            {
                var instance = activator(f1(k), f2(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator2(
            Func<object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            return k => activator(f1(k), f2(k));
        }

        private static Func<IKernel, object> CreateActivator3(
            Func<object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator3(
            Func<object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            return k => activator(f1(k), f2(k), f3(k));
        }

        private static Func<IKernel, object> CreateActivator4(
            Func<object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator4(
            Func<object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            return k => activator(f1(k), f2(k), f3(k), f4(k));
        }

        private static Func<IKernel, object> CreateActivator5(
            Func<object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator5(
            Func<object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k));
        }

        private static Func<IKernel, object> CreateActivator6(
            Func<object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator6(
            Func<object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k));
        }

        private static Func<IKernel, object> CreateActivator7(
            Func<object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator7(
            Func<object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k));
        }

        private static Func<IKernel, object> CreateActivator8(
            Func<object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator8(
            Func<object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k));
        }

        private static Func<IKernel, object> CreateActivator9(
            Func<object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator9(
            Func<object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k));
        }

        private static Func<IKernel, object> CreateActivator10(
            Func<object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator10(
            Func<object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k));
        }

        private static Func<IKernel, object> CreateActivator11(
            Func<object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator11(
            Func<object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k));
        }

        private static Func<IKernel, object> CreateActivator12(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator12(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k));
        }

        private static Func<IKernel, object> CreateActivator13(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator13(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k));
        }

        private static Func<IKernel, object> CreateActivator14(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator14(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k));
        }

        private static Func<IKernel, object> CreateActivator15(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            var f15 = factories[14];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k), f15(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator15(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            var f15 = factories[14];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k), f15(k));
        }

        private static Func<IKernel, object> CreateActivator16(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories,
            Action<IKernel, object>[] actions)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            var f15 = factories[14];
            var f16 = factories[15];
            return k =>
            {
                var instance = activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k), f15(k), f16(k));

                for(var i = 0; i < actions.Length; i++)
                {
                    actions[i](k, instance);
                }

                return instance;
            };
        }

        private static Func<IKernel, object> CreateActivator16(
            Func<object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> activator,
            Func<IKernel, object>[] factories)
        {
            var f1 = factories[0];
            var f2 = factories[1];
            var f3 = factories[2];
            var f4 = factories[3];
            var f5 = factories[4];
            var f6 = factories[5];
            var f7 = factories[6];
            var f8 = factories[7];
            var f9 = factories[8];
            var f10 = factories[9];
            var f11 = factories[10];
            var f12 = factories[11];
            var f13 = factories[12];
            var f14 = factories[13];
            var f15 = factories[14];
            var f16 = factories[15];
            return k => activator(f1(k), f2(k), f3(k), f4(k), f5(k), f6(k), f7(k), f8(k), f9(k), f10(k), f11(k), f12(k), f13(k), f14(k), f15(k), f16(k));
        }

    }
}
