// <auto-generated />
namespace Smart.Resolver.Providers
{
    using System;

    public sealed partial class StandardProvider
    {
<# for (var i = 1; i <= 16; i++) { #>
        private static Func<object> CreateActivator<#= i #>(
            Action<object> processor,
            Func<object<# for (var j = 0; j < i; j++) { #>, object<# } #>> activator,
            Func<object>[] factories)
        {
<# for (var j = 0; j < i; j++) { #>
            var f<#= j + 1 #> = factories[<#= j #>];
<# } #>
            return () =>
            {
                var instance = activator(f1()<# for (var j = 0; j < i - 1; j++) { #>, f<#= j + 2 #>()<# } #>);
                processor(instance);
                return instance;
            };
        }

        private static Func<object> CreateActivator<#= i #>(
            Func<object<# for (var j = 0; j < i; j++) { #>, object<# } #>> activator,
            Func<object>[] factories)
        {
<# for (var j = 0; j < i; j++) { #>
            var f<#= j + 1 #> = factories[<#= j #>];
<# } #>
            return () => activator(f1()<# for (var j = 0; j < i - 1; j++) { #>, f<#= j + 2 #>()<# } #>);
        }

<# } #>
    }
}
